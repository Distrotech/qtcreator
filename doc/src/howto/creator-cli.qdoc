/****************************************************************************
**
** Copyright (c) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of Qt Creator
**
**
** GNU Free Documentation License
**
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \contentspage index.html
    \previouspage creator-project-generic.html
    \page creator-cli.html
    \nextpage creator-keyboard-shortcuts.html

    \title Using Command Line Options

    You can start \QC and specify some options from the command line.
    For example, you can open a file to any line.

    To specify command line options, enter the following command in the \QC
    installation or build directory:

    \c {qtcreator [option] [filename[:line_number]]}

    \note You can use either a colon (:) or a plus sign (+) as a separator
    between the filename and line number. You can also use a space between the
    separator and the line number.

    For example:

    \list

        \li \c {C:\qtcreator\bin>qtcreator -help}

        \li \c {C:\qtcreator\bin>qtcreator C:\TextFinder\textfinder.cpp:100}

        \li \c {C:\qtcreator\bin>qtcreator C:\TextFinder\textfinder.cpp +100}

    \endlist

    To open a project that is located in a particular folder, you can pass on the folder
    name as a command line argument. \QC looks for a session that matches the folder name and
    loads it. Or it looks for a project file in the folder and opens it. For example:

    \c {qtcreator .}

    The following table summarizes the available options:

    \table
        \header
            \li  Option
            \li  Description

        \row
            \li  -help
            \li  Display help on command line options.

        \row
            \li  -version
            \li  Display \QC version.

        \row
            \li  -client
            \li  Attempt to connect to an already running instance of \QC.

        \row
            \li  -noload <plugin>
            \li  Do not load the specified plugin.

        \row
            \li  -profile
            \li  Output plugin start up and shut down profiling data.

        \row
            \li  -settingspath <path>
            \li  Override the default path where user settings are stored.

        \row
            \li  -color <color>
            \li  Core plugin: override the selected UI color.

        \row
            \li  -debug <PID-or-corefile>
            \li  Debugger plugin: attach to process ID or core file.

        \row
            \li  -wincrashevent <event-handle>
            \li  Debugger plugin: Attach to crashed processes by using the specified
            event handle.

        \row
            \li  -customwizard-verbose
            \li  ProjectExplorer plugin: display additional information when loading
            custom wizards. For more information about custom wizards, see
            \l{Adding New Custom Wizards}

        \row
            \li  -lastsession
            \li  ProjectExplorer plugin: load the last session when \QC starts.
            Open the projects and files that were open when you last exited \QC.
            For more information about managing sessions, see \l{Managing Sessions}.

    \endtable

    */
